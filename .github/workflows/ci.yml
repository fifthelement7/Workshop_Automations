name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11.7'
  NODE_VERSION: '20'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        cd packages/api && pip install -r requirements.txt
    
    - name: Run Black formatting check
      run: |
        black --check packages/api/src/
    
    - name: Run Flake8 linting
      run: |
        flake8 packages/api/src/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy type checking
      run: |
        mypy packages/api/src/ --ignore-missing-imports

  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16.1
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: mindscribe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd packages/api && pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock pytest-cov testcontainers
    
    - name: Set up test environment
      run: |
        cp .env.testing .env
    
    - name: Run tests
      env:
        DATABASE_TEST_URL: postgresql://postgres:password@localhost:5432/mindscribe_test
        ENVIRONMENT: testing
        SECRET_KEY: test-secret-key
      run: |
        cd packages/api && python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/api/coverage.xml
        flags: api
        name: codecov-api

  build:
    runs-on: ubuntu-latest
    needs: [lint, test-api]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build API package
      run: |
        cd packages/api
        python -m pip install --upgrade pip
        pip install build
        python -m build
    
    - name: Store build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: api-build
        path: packages/api/dist/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r packages/api/src/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan
        path: bandit-report.json