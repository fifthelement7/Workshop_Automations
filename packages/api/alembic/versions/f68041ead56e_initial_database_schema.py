"""Initial database schema

Revision ID: f68041ead56e
Revises: 
Create Date: 2025-08-16 22:31:43.535475

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f68041ead56e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clients',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('engagement_score', sa.DECIMAL(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_clients_org', 'clients', ['organization_id'], unique=False)
    op.create_table('coaches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('voice_profile', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notification_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('coach_id', sa.UUID(), nullable=False),
    sa.Column('session_date', sa.Date(), nullable=False),
    sa.Column('session_type', sa.String(), nullable=True),
    sa.Column('transcript_url', sa.Text(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('participant_count', sa.Integer(), nullable=True),
    sa.Column('processing_status', sa.String(), nullable=True),
    sa.Column('session_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['coach_id'], ['coaches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sessions_coach_date', 'sessions', ['coach_id', 'session_date'], unique=False)
    op.create_index('idx_sessions_processing', 'sessions', ['processing_status'], unique=False)
    op.create_table('templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('workshop_type', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('variables', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('coach_id', sa.UUID(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['coach_id'], ['coaches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('client_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('client_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('speaking_time_seconds', sa.Integer(), nullable=True),
    sa.Column('engagement_level', sa.String(), nullable=True),
    sa.Column('breakthrough_detected', sa.Boolean(), nullable=True),
    sa.Column('priority_score', sa.DECIMAL(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('client_id', 'session_id')
    )
    op.create_table('summaries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('client_session_id', sa.UUID(), nullable=False),
    sa.Column('wins', sa.Text(), nullable=True),
    sa.Column('challenges', sa.Text(), nullable=True),
    sa.Column('action_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('coach_recommendations', sa.Text(), nullable=True),
    sa.Column('ai_version', sa.Text(), nullable=True),
    sa.Column('coach_edited_version', sa.Text(), nullable=True),
    sa.Column('refinement_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('search_vector', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['client_session_id'], ['client_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_summaries_approved', 'summaries', ['approved_at'], unique=False, postgresql_where='approved_at IS NOT NULL')
    # Create GIN index for full-text search (tsvector column will be added later)
    # op.create_index('idx_summaries_search', 'summaries', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_table('follow_ups',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('summary_id', sa.UUID(), nullable=False),
    sa.Column('client_id', sa.UUID(), nullable=False),
    sa.Column('subject', sa.String(), nullable=True),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('template_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('scheduled_for', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
    sa.ForeignKeyConstraint(['summary_id'], ['summaries.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_follow_ups_status', 'follow_ups', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_follow_ups_status', table_name='follow_ups')
    op.drop_table('follow_ups')
    # op.drop_index('idx_summaries_search', table_name='summaries', postgresql_using='gin')
    op.drop_index('idx_summaries_approved', table_name='summaries', postgresql_where='approved_at IS NOT NULL')
    op.drop_table('summaries')
    op.drop_table('client_sessions')
    op.drop_table('templates')
    op.drop_index('idx_sessions_processing', table_name='sessions')
    op.drop_index('idx_sessions_coach_date', table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('coaches')
    op.drop_index('idx_clients_org', table_name='clients')
    op.drop_table('clients')
    op.drop_table('organizations')
    # ### end Alembic commands ###
